#pragma once

#include "luanics/grid/Grid.hpp"

#include <vector>

namespace luanics::grid {

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///
/// @class DynamicGrid
///
/// @brief Grid implemented using 2d vector of vectors.
///
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class DynamicGrid : public Grid {
public:
	//////////////////////////////////////////////////////////////////
	/// @name Management
	//////////////////////////////////////////////////////////////////
	//@{
	DynamicGrid(); ///< 0 by 0 grid
	DynamicGrid(unsigned const width, unsigned const height);
	DynamicGrid(DynamicGrid const & other) = default;
	DynamicGrid & operator=(DynamicGrid const & other) = default;
	DynamicGrid(DynamicGrid && other) = default;
	DynamicGrid & operator=(DynamicGrid && other) = default;
	//@}

	//////////////////////////////////////////////////////////////////
	/// @name Attributes
	//////////////////////////////////////////////////////////////////
	//@{
	virtual unsigned width() const override final;
	virtual unsigned height() const override final;
	//@}

	//////////////////////////////////////////////////////////////////
	/// @name Access
	//////////////////////////////////////////////////////////////////
	//@{
	/// @pre x < width and y < height
	virtual ValueType & operator()(unsigned const x, unsigned const y) override final;
	/// @pre x < width and y < height
	virtual ValueType const & operator()(unsigned const x, unsigned const y) const override final;
	//@}

	//////////////////////////////////////////////////////////////////
	/// @name Modification
	//////////////////////////////////////////////////////////////////
	//@{
	/// Fills with EmptyValue
	virtual void clear() override final;
	virtual void fillWith(ValueType const value) override final;
	//@}

	//////////////////////////////////////////////////////////////////
	/// @name Io
	//////////////////////////////////////////////////////////////////
	//@{
	virtual void writeTo(std::ostream & out) const final;
	/// Grid::readFrom(), this will dynamically resize.
	virtual void readFrom(std::istream & in) final;
	//@}

private:
	unsigned _width;
	unsigned _height;
	std::vector<std::vector<ValueType>> _data;
}; // class DynamicGrid

} // namespace luanics::grid
